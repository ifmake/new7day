(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@ant-design/colors'), require('@angular/common/http'), require('@angular/platform-browser'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@ant-design/icons-angular', ['exports', '@angular/common', '@angular/core', '@ant-design/colors', '@angular/common/http', '@angular/platform-browser', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global['ant-design'] = global['ant-design'] || {}, global['ant-design']['icons-angular'] = {}), global.ng.common, global.ng.core, global.colors, global.ng.common.http, global.ng.platformBrowser, global.rxjs, global.rxjs.operators));
}(this, (function (exports, common, core, colors, http, platformBrowser, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    var ANT_ICON_ANGULAR_CONSOLE_PREFIX = '[@ant-design/icons-angular]:';
    function error(message) {
        console.error(ANT_ICON_ANGULAR_CONSOLE_PREFIX + " " + message + ".");
    }
    function warn(message) {
        if (core.isDevMode()) {
            console.warn(ANT_ICON_ANGULAR_CONSOLE_PREFIX + " " + message + ".");
        }
    }
    function getSecondaryColor(primaryColor) {
        return colors.generate(primaryColor)[0];
    }
    function withSuffix(name, theme) {
        switch (theme) {
            case 'fill': return name + "-fill";
            case 'outline': return name + "-o";
            case 'twotone': return name + "-twotone";
            case undefined: return name;
            default: throw new Error(ANT_ICON_ANGULAR_CONSOLE_PREFIX + "Theme \"" + theme + "\" is not a recognized theme!");
        }
    }
    function withSuffixAndColor(name, theme, pri, sec) {
        return withSuffix(name, theme) + "-" + pri + "-" + sec;
    }
    function mapAbbrToTheme(abbr) {
        return abbr === 'o' ? 'outline' : abbr;
    }
    function alreadyHasAThemeSuffix(name) {
        return name.endsWith('-fill') || name.endsWith('-o') || name.endsWith('-twotone');
    }
    function isIconDefinition(target) {
        return (typeof target === 'object' &&
            typeof target.name === 'string' &&
            (typeof target.theme === 'string' || target.theme === undefined) &&
            typeof target.icon === 'string');
    }
    /**
     * Get an `IconDefinition` object from abbreviation type, like `account-book-fill`.
     * @param str
     */
    function getIconDefinitionFromAbbr(str) {
        var arr = str.split('-');
        var theme = mapAbbrToTheme(arr.splice(arr.length - 1, 1)[0]);
        var name = arr.join('-');
        return {
            name: name,
            theme: theme,
            icon: ''
        };
    }
    function cloneSVG(svg) {
        return svg.cloneNode(true);
    }
    /**
     * Parse inline SVG string and replace colors with placeholders. For twotone icons only.
     */
    function replaceFillColor(raw) {
        return raw
            .replace(/['"]#333['"]/g, '"primaryColor"')
            .replace(/['"]#E6E6E6['"]/g, '"secondaryColor"')
            .replace(/['"]#D9D9D9['"]/g, '"secondaryColor"')
            .replace(/['"]#D8D8D8['"]/g, '"secondaryColor"');
    }
    /**
     * Split a name with namespace in it into a tuple like [ name, namespace ].
     */
    function getNameAndNamespace(type) {
        var split = type.split(':');
        switch (split.length) {
            case 1: return [type, ''];
            case 2: return [split[1], split[0]];
            default: throw new Error(ANT_ICON_ANGULAR_CONSOLE_PREFIX + "The icon type " + type + " is not valid!");
        }
    }
    function hasNamespace(type) {
        return getNameAndNamespace(type)[1] !== '';
    }

    function NameSpaceIsNotSpecifyError() {
        return new Error(ANT_ICON_ANGULAR_CONSOLE_PREFIX + "Type should have a namespace. Try \"namespace:" + name + "\".");
    }
    function IconNotFoundError(icon) {
        return new Error(ANT_ICON_ANGULAR_CONSOLE_PREFIX + "the icon " + icon + " does not exist or is not registered.");
    }
    function HttpModuleNotImport() {
        error("you need to import \"HttpClientModule\" to use dynamic importing.");
        return null;
    }
    function UrlNotSafeError(url) {
        return new Error(ANT_ICON_ANGULAR_CONSOLE_PREFIX + "The url \"" + url + "\" is unsafe.");
    }
    function SVGTagNotFoundError() {
        return new Error(ANT_ICON_ANGULAR_CONSOLE_PREFIX + "<svg> tag not found.");
    }
    function DynamicLoadingTimeoutError() {
        return new Error(ANT_ICON_ANGULAR_CONSOLE_PREFIX + "Importing timeout error.");
    }

    var JSONP_HANDLER_NAME = '__ant_icon_load';
    var IconService = /** @class */ (function () {
        function IconService(_rendererFactory, _handler, 
        // tslint:disable-next-line:no-any
        _document, sanitizer) {
            this._rendererFactory = _rendererFactory;
            this._handler = _handler;
            this._document = _document;
            this.sanitizer = sanitizer;
            this.defaultTheme = 'outline';
            /**
             * All icon definitions would be registered here.
             */
            this._svgDefinitions = new Map();
            /**
             * Cache all rendered icons. Icons are identified by name, theme,
             * and for twotone icons, primary color and secondary color.
             */
            this._svgRenderedDefinitions = new Map();
            this._inProgressFetches = new Map();
            /**
             * Url prefix for fetching inline SVG by dynamic importing.
             */
            this._assetsUrlRoot = '';
            this._twoToneColorPalette = {
                primaryColor: '#333333',
                secondaryColor: '#E6E6E6'
            };
            /** A flag indicates whether jsonp loading is enabled. */
            this._enableJsonpLoading = false;
            this._jsonpIconLoad$ = new rxjs.Subject();
            this._renderer = this._rendererFactory.createRenderer(null, null);
            if (this._handler) {
                this._http = new http.HttpClient(this._handler);
            }
        }
        Object.defineProperty(IconService.prototype, "twoToneColor", {
            get: function () {
                // Make a copy to avoid unexpected changes.
                return Object.assign({}, this._twoToneColorPalette);
            },
            set: function (_a) {
                var primaryColor = _a.primaryColor, secondaryColor = _a.secondaryColor;
                this._twoToneColorPalette.primaryColor = primaryColor;
                this._twoToneColorPalette.secondaryColor =
                    secondaryColor || getSecondaryColor(primaryColor);
            },
            enumerable: false,
            configurable: true
        });
        /**
         * Call this method to switch to jsonp like loading.
         */
        IconService.prototype.useJsonpLoading = function () {
            var _this = this;
            if (!this._enableJsonpLoading) {
                this._enableJsonpLoading = true;
                window[JSONP_HANDLER_NAME] = function (icon) {
                    _this._jsonpIconLoad$.next(icon);
                };
            }
            else {
                warn('You are already using jsonp loading.');
            }
        };
        /**
         * Change the prefix of the inline svg resources, so they could be deployed elsewhere, like CDN.
         * @param prefix
         */
        IconService.prototype.changeAssetsSource = function (prefix) {
            this._assetsUrlRoot = prefix.endsWith('/') ? prefix : prefix + '/';
        };
        /**
         * Add icons provided by ant design.
         * @param icons
         */
        IconService.prototype.addIcon = function () {
            var _this = this;
            var icons = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                icons[_i] = arguments[_i];
            }
            icons.forEach(function (icon) {
                _this._svgDefinitions.set(withSuffix(icon.name, icon.theme), icon);
            });
        };
        /**
         * Register an icon. Namespace is required.
         * @param type
         * @param literal
         */
        IconService.prototype.addIconLiteral = function (type, literal) {
            var _a = __read(getNameAndNamespace(type), 2), _ = _a[0], namespace = _a[1];
            if (!namespace) {
                throw NameSpaceIsNotSpecifyError();
            }
            this.addIcon({ name: type, icon: literal });
        };
        /**
         * Remove all cache.
         */
        IconService.prototype.clear = function () {
            this._svgDefinitions.clear();
            this._svgRenderedDefinitions.clear();
        };
        /**
         * Get a rendered `SVGElement`.
         * @param icon
         * @param twoToneColor
         */
        IconService.prototype.getRenderedContent = function (icon, twoToneColor) {
            var _this = this;
            // If `icon` is a `IconDefinition`, go to the next step. If not, try to fetch it from cache.
            var definitionOrNull = isIconDefinition(icon)
                ? icon
                : this._svgDefinitions.get(icon) || null;
            // If `icon` is a `IconDefinition` of successfully fetch, wrap it in an `Observable`.
            // Otherwise try to fetch it from remote.
            var $iconDefinition = definitionOrNull
                ? rxjs.of(definitionOrNull)
                : this._loadIconDynamically(icon);
            // If finally get an `IconDefinition`, render and return it. Otherwise throw an error.
            return $iconDefinition.pipe(operators.map(function (i) {
                if (!i) {
                    throw IconNotFoundError(icon);
                }
                return _this._loadSVGFromCacheOrCreateNew(i, twoToneColor);
            }));
        };
        IconService.prototype.getCachedIcons = function () {
            return this._svgDefinitions;
        };
        /**
         * Get raw svg and assemble a `IconDefinition` object.
         * @param type
         */
        IconService.prototype._loadIconDynamically = function (type) {
            var _this = this;
            // If developer doesn't provide HTTP module nor enable jsonp loading, just throw an error.
            if (!this._http && !this._enableJsonpLoading) {
                return rxjs.of(HttpModuleNotImport());
            }
            // If multi directive ask for the same icon at the same time,
            // request should only be fired once.
            var inProgress = this._inProgressFetches.get(type);
            if (!inProgress) {
                var _a = __read(getNameAndNamespace(type), 2), name = _a[0], namespace = _a[1];
                // If the string has a namespace within, create a simple `IconDefinition`.
                var icon_1 = namespace
                    ? { name: type, icon: '' }
                    : getIconDefinitionFromAbbr(name);
                var suffix = this._enableJsonpLoading ? '.js' : '.svg';
                var url = (namespace
                    ? this._assetsUrlRoot + "assets/" + namespace + "/" + name
                    : this._assetsUrlRoot + "assets/" + icon_1.theme + "/" + icon_1.name) + suffix;
                var safeUrl = this.sanitizer.sanitize(core.SecurityContext.URL, url);
                if (!safeUrl) {
                    throw UrlNotSafeError(url);
                }
                var source = !this._enableJsonpLoading
                    ? this._http
                        .get(safeUrl, { responseType: 'text' })
                        .pipe(operators.map(function (literal) { return (Object.assign(Object.assign({}, icon_1), { icon: literal })); }))
                    : this._loadIconDynamicallyWithJsonp(icon_1, safeUrl);
                inProgress = source.pipe(operators.tap(function (definition) { return _this.addIcon(definition); }), operators.finalize(function () { return _this._inProgressFetches.delete(type); }), operators.catchError(function () { return rxjs.of(null); }), operators.share());
                this._inProgressFetches.set(type, inProgress);
            }
            return inProgress;
        };
        IconService.prototype._loadIconDynamicallyWithJsonp = function (icon, url) {
            var _this = this;
            return new rxjs.Observable(function (subscriber) {
                var loader = _this._document.createElement('script');
                var timer = setTimeout(function () {
                    clean();
                    subscriber.error(DynamicLoadingTimeoutError());
                }, 6000);
                loader.src = url;
                function clean() {
                    loader.parentNode.removeChild(loader);
                    clearTimeout(timer);
                }
                _this._document.body.appendChild(loader);
                _this._jsonpIconLoad$
                    .pipe(operators.filter(function (i) { return i.name === icon.name && i.theme === icon.theme; }), operators.take(1))
                    .subscribe(function (i) {
                    subscriber.next(i);
                    clean();
                });
            });
        };
        /**
         * Render a new `SVGElement` for a given `IconDefinition`, or make a copy from cache.
         * @param icon
         * @param twoToneColor
         */
        IconService.prototype._loadSVGFromCacheOrCreateNew = function (icon, twoToneColor) {
            var svg;
            var pri = twoToneColor || this._twoToneColorPalette.primaryColor;
            var sec = getSecondaryColor(pri) || this._twoToneColorPalette.secondaryColor;
            var key = icon.theme === 'twotone'
                ? withSuffixAndColor(icon.name, icon.theme, pri, sec)
                : icon.theme === undefined
                    ? icon.name
                    : withSuffix(icon.name, icon.theme);
            // Try to make a copy from cache.
            var cached = this._svgRenderedDefinitions.get(key);
            if (cached) {
                svg = cached.icon;
            }
            else {
                svg = this._setSVGAttribute(this._colorizeSVGIcon(
                // Icons provided by ant design should be refined to remove preset colors.
                this._createSVGElementFromString(hasNamespace(icon.name) ? icon.icon : replaceFillColor(icon.icon)), icon.theme === 'twotone', pri, sec));
                // Cache it.
                this._svgRenderedDefinitions.set(key, Object.assign(Object.assign({}, icon), { icon: svg }));
            }
            return cloneSVG(svg);
        };
        IconService.prototype._createSVGElementFromString = function (str) {
            var div = this._document.createElement('div');
            div.innerHTML = str;
            var svg = div.querySelector('svg');
            if (!svg) {
                throw SVGTagNotFoundError;
            }
            return svg;
        };
        IconService.prototype._setSVGAttribute = function (svg) {
            this._renderer.setAttribute(svg, 'width', '1em');
            this._renderer.setAttribute(svg, 'height', '1em');
            return svg;
        };
        IconService.prototype._colorizeSVGIcon = function (svg, twotone, pri, sec) {
            if (twotone) {
                var children = svg.childNodes;
                var length = children.length;
                for (var i = 0; i < length; i++) {
                    var child = children[i];
                    if (child.getAttribute('fill') === 'secondaryColor') {
                        this._renderer.setAttribute(child, 'fill', sec);
                    }
                    else {
                        this._renderer.setAttribute(child, 'fill', pri);
                    }
                }
            }
            this._renderer.setAttribute(svg, 'fill', 'currentColor');
            return svg;
        };
        return IconService;
    }());
    IconService.decorators = [
        { type: core.Injectable }
    ];
    IconService.ctorParameters = function () { return [
        { type: core.RendererFactory2 },
        { type: http.HttpBackend, decorators: [{ type: core.Optional }] },
        { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [common.DOCUMENT,] }] },
        { type: platformBrowser.DomSanitizer }
    ]; };

    function checkMeta(prev, after) {
        return prev.type === after.type && prev.theme === after.theme && prev.twoToneColor === after.twoToneColor;
    }
    var IconDirective = /** @class */ (function () {
        function IconDirective(_iconService, _elementRef, _renderer) {
            this._iconService = _iconService;
            this._elementRef = _elementRef;
            this._renderer = _renderer;
        }
        IconDirective.prototype.ngOnChanges = function (changes) {
            if (changes.type || changes.theme || changes.twoToneColor) {
                this._changeIcon();
            }
        };
        /**
         * Render a new icon in the current element. Remove the icon when `type` is falsy.
         */
        IconDirective.prototype._changeIcon = function () {
            var _this = this;
            return new Promise(function (resolve) {
                if (!_this.type) {
                    _this._clearSVGElement();
                    resolve(null);
                }
                else {
                    var preMeta_1 = _this._getSelfRenderMeta();
                    _this._iconService.getRenderedContent(_this._parseIconType(_this.type, _this.theme), _this.twoToneColor).subscribe(function (svg) {
                        // avoid race condition, see https://github.com/ant-design/ant-design-icons/issues/315
                        if (checkMeta(preMeta_1, _this._getSelfRenderMeta())) {
                            _this._setSVGElement(svg);
                            resolve(svg);
                        }
                        else {
                            resolve(null);
                        }
                    });
                }
            });
        };
        IconDirective.prototype._getSelfRenderMeta = function () {
            return {
                type: this.type,
                theme: this.theme,
                twoToneColor: this.twoToneColor
            };
        };
        /**
         * Parse a icon to the standard form, an `IconDefinition` or a string like 'account-book-fill` (with a theme suffixed).
         * If namespace is specified, ignore theme because it meaningless for users' icons.
         *
         * @param type
         * @param theme
         */
        IconDirective.prototype._parseIconType = function (type, theme) {
            if (isIconDefinition(type)) {
                return type;
            }
            else {
                var _b = __read(getNameAndNamespace(type), 2), name = _b[0], namespace = _b[1];
                if (namespace) {
                    return type;
                }
                if (alreadyHasAThemeSuffix(name)) {
                    if (!!theme) {
                        warn("'type' " + name + " already gets a theme inside so 'theme' " + theme + " would be ignored");
                    }
                    return name;
                }
                else {
                    return withSuffix(name, theme || this._iconService.defaultTheme);
                }
            }
        };
        IconDirective.prototype._setSVGElement = function (svg) {
            this._clearSVGElement();
            this._renderer.appendChild(this._elementRef.nativeElement, svg);
        };
        IconDirective.prototype._clearSVGElement = function () {
            var _a;
            var el = this._elementRef.nativeElement;
            var children = el.childNodes;
            var length = children.length;
            for (var i = length - 1; i >= 0; i--) {
                var child = children[i];
                if (((_a = child.tagName) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === 'svg') {
                    this._renderer.removeChild(el, child);
                }
            }
        };
        return IconDirective;
    }());
    IconDirective.decorators = [
        { type: core.Directive, args: [{
                    selector: '[antIcon]'
                },] }
    ];
    IconDirective.ctorParameters = function () { return [
        { type: IconService },
        { type: core.ElementRef },
        { type: core.Renderer2 }
    ]; };
    IconDirective.propDecorators = {
        type: [{ type: core.Input }],
        theme: [{ type: core.Input }],
        twoToneColor: [{ type: core.Input }]
    };

    var IconModule = /** @class */ (function () {
        function IconModule() {
        }
        return IconModule;
    }());
    IconModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    exports: [IconDirective],
                    declarations: [IconDirective],
                    providers: [IconService]
                },] }
    ];

    var manifest = {
        fill: [
            'account-book', 'aliwangwang', 'alipay-circle', 'android', 'alipay-square', 'amazon-square', 'amazon-circle', 'api', 'appstore', 'backward', 'bank', 'audio', 'behance-square', 'behance-circle', 'book', 'bell', 'box-plot', 'alert', 'bulb', 'calculator', 'camera', 'apple', 'build', 'bug', 'caret-up', 'caret-right', 'car', 'caret-left', 'check-circle', 'check-square', 'ci-circle', 'calendar', 'caret-down', 'carry-out', 'close-square', 'cloud', 'close-circle', 'code-sandbox-square', 'code-sandbox-circle', 'codepen-square', 'code', 'contacts', 'codepen-circle', 'container', 'clock-circle', 'control', 'chrome', 'copy', 'copyright-circle', 'crown', 'customer-service', 'compass', 'dashboard', 'database', 'delete', 'dingtalk-circle', 'dollar-circle', 'dingtalk-square', 'diff', 'down-square', 'dropbox-square', 'dropbox-circle', 'dribbble-square', 'dribbble-circle', 'edit', 'down-circle', 'euro-circle', 'credit-card', 'exclamation-circle', 'dislike', 'environment', 'eye-invisible', 'fast-backward', 'facebook', 'experiment', 'fast-forward', 'file-excel', 'file-add', 'file-exclamation', 'file-pdf', 'file-markdown', 'file', 'eye', 'file-ppt', 'file-image', 'file-unknown', 'file-word', 'filter', 'flag', 'folder-add', 'folder-open', 'folder', 'fire', 'frown', 'fund', 'funnel-plot', 'format-painter', 'forward', 'gift', 'gitlab', 'file-text', 'github', 'gold', 'google-plus-circle', 'google-plus-square', 'heart', 'hdd', 'google-circle', 'golden', 'highlight', 'hourglass', 'google-square', 'idcard', 'home', 'html5', 'ie-circle', 'info-circle', 'ie-square', 'insurance', 'interaction', 'instagram', 'layout', 'left-circle', 'left-square', 'like', 'linkedin', 'mail', 'medicine-box', 'lock', 'meh', 'mac-command', 'medium-circle', 'medium-square', 'message', 'minus-square', 'money-collect', 'minus-circle', 'notification', 'pay-circle', 'pause-circle', 'picture', 'phone', 'mobile', 'play-circle', 'plus-square', 'file-zip', 'plus-circle', 'pound-circle', 'play-square', 'profile', 'printer', 'pushpin', 'property-safety', 'pie-chart', 'qq-circle', 'question-circle', 'qq-square', 'read', 'red-envelope', 'reddit-square', 'reddit-circle', 'rest', 'right-square', 'right-circle', 'rocket', 'robot', 'project', 'reconciliation', 'schedule', 'save', 'security-scan', 'shop', 'shopping', 'sketch-circle', 'setting', 'skin', 'signal', 'safety-certificate', 'slack-circle', 'sketch-square', 'sliders', 'smile', 'skype', 'snippets', 'sound', 'star', 'step-backward', 'stop', 'step-forward', 'tablet', 'slack-square', 'tags', 'taobao-circle', 'taobao-square', 'thunderbolt', 'tool', 'trophy', 'trademark-circle', 'switcher', 'unlock', 'twitter-square', 'up-square', 'up-circle', 'twitter-circle', 'usb', 'wallet', 'video-camera', 'wechat', 'warning', 'weibo-circle', 'weibo-square', 'windows', 'youtube', 'yahoo', 'yuque', 'zhihu-circle', 'tag', 'zhihu-square'
        ],
        outline: [
            'account-book', 'alibaba', 'align-center', 'align-right', 'align-left', 'amazon', 'alipay-circle', 'android', 'ant-design', 'aliwangwang', 'apartment', 'appstore', 'appstore-add', 'alipay', 'api', 'ant-cloud', 'arrow-left', 'arrows-alt', 'area-chart', 'arrow-right', 'apple', 'arrow-up', 'arrow-down', 'aim', 'barcode', 'audio-muted', 'bank', 'bar-chart', 'behance', 'audit', 'block', 'bars', 'book', 'behance-square', 'border-inner', 'border-bottom', 'border-horizontal', 'border-left', 'border-outer', 'backward', 'alert', 'border-right', 'bell', 'bold', 'border-verticle', 'border', 'borderless-table', 'bg-colors', 'box-plot', 'border-top', 'audio', 'bug', 'bulb', 'calendar', 'build', 'aliyun', 'branches', 'caret-left', 'car', 'calculator', 'camera', 'check-circle', 'check-square', 'check', 'carry-out', 'caret-down', 'caret-up', 'caret-right', 'clear', 'ci-circle', 'close-square', 'close', 'cloud-download', 'cloud', 'cloud-upload', 'cloud-server', 'clock-circle', 'code', 'ci', 'coffee', 'cloud-sync', 'cluster', 'column-height', 'code-sandbox', 'comment', 'console-sql', 'compass', 'column-width', 'chrome', 'compress', 'codepen', 'codepen-circle', 'close-circle', 'container', 'copy', 'credit-card', 'crown', 'dash', 'dashboard', 'database', 'copyright-circle', 'delete-column', 'delete-row', 'deployment-unit', 'desktop', 'contacts', 'dingtalk', 'dingding', 'delivered-procedure', 'diff', 'delete', 'disconnect', 'dislike', 'dollar-circle', 'customer-service', 'double-right', 'down-circle', 'dot-chart', 'download', 'drag', 'copyright', 'down', 'dollar', 'down-square', 'control', 'edit', 'double-left', 'ellipsis', 'enter', 'dropbox', 'dribbble-square', 'environment', 'exception', 'exclamation', 'expand-alt', 'euro', 'eye', 'dribbble', 'experiment', 'exclamation-circle', 'facebook', 'fall', 'field-number', 'expand', 'fast-backward', 'field-string', 'field-time', 'file-exclamation', 'euro-circle', 'field-binary', 'file-done', 'file-excel', 'file-gif', 'file-markdown', 'file-add', 'file-pdf', 'file-jpg', 'file-image', 'file', 'file-protect', 'file-sync', 'file-unknown', 'eye-invisible', 'file-text', 'export', 'file-search', 'file-word', 'file-zip', 'filter', 'flag', 'folder-add', 'fire', 'folder-view', 'folder', 'folder-open', 'fork', 'form', 'format-painter', 'font-size', 'font-colors', 'function', 'fund', 'fullscreen', 'fund-projection-screen', 'frown', 'fullscreen-exit', 'forward', 'fund-view', 'gift', 'fast-forward', 'gateway', 'gold', 'global', 'google-plus', 'google', 'gitlab', 'gif', 'funnel-plot', 'group', 'hdd', 'github', 'heart', 'highlight', 'hourglass', 'history', 'home', 'html5', 'idcard', 'heat-map', 'import', 'info-circle', 'insert-row-above', 'insert-row-right', 'instagram', 'insurance', 'ie', 'inbox', 'insert-row-below', 'insert-row-left', 'laptop', 'interaction', 'layout', 'key', 'italic', 'issues-close', 'info', 'left-circle', 'left-square', 'line-height', 'like', 'left', 'line-chart', 'line', 'linkedin', 'link', 'loading', 'login', 'loading-3-quarters', 'lock', 'logout', 'medium', 'man', 'mail', 'mac-command', 'medicine-box', 'file-ppt', 'merge-cells', 'menu', 'message', 'minus-circle', 'minus', 'mobile', 'minus-square', 'menu-fold', 'money-collect', 'monitor', 'node-collapse', 'more', 'node-expand', 'medium-workmark', 'notification', 'partition', 'paper-clip', 'ordered-list', 'menu-unfold', 'node-index', 'pause-circle', 'percentage', 'pause', 'number', 'pay-circle', 'phone', 'pic-center', 'one-to-one', 'picture', 'pie-chart', 'play-circle', 'pic-left', 'play-square', 'plus-circle', 'plus-square', 'plus', 'pound-circle', 'meh', 'poweroff', 'printer', 'pound', 'pic-right', 'profile', 'qq', 'property-safety', 'pull-request', 'qrcode', 'radius-bottomright', 'radar-chart', 'radius-upleft', 'question-circle', 'read', 'radius-setting', 'radius-upright', 'reconciliation', 'red-envelope', 'retweet', 'right-circle', 'reload', 'reddit', 'rest', 'rise', 'right', 'robot', 'right-square', 'rotate-right', 'rollback', 'safety-certificate', 'redo', 'rocket', 'rotate-left', 'pushpin', 'question', 'save', 'safety', 'schedule', 'scissor', 'search', 'security-scan', 'select', 'scan', 'shake', 'send', 'share-alt', 'shopping', 'shrink', 'shopping-cart', 'radius-bottomleft', 'project', 'setting', 'skype', 'sliders', 'slack-square', 'skin', 'shop', 'small-dash', 'sort-ascending', 'sound', 'snippets', 'solution', 'sort-descending', 'star', 'split-cells', 'smile', 'strikethrough', 'subnode', 'swap-left', 'swap', 'stock', 'sketch', 'stop', 'sisternode', 'slack', 'step-forward', 'step-backward', 'table', 'switcher', 'sync', 'tags', 'taobao-circle', 'thunderbolt', 'taobao', 'team', 'to-top', 'transaction', 'trademark-circle', 'trademark', 'twitter', 'underline', 'undo', 'ungroup', 'trophy', 'tool', 'translation', 'unordered-list', 'unlock', 'up-square', 'user-add', 'user-delete', 'user', 'usb', 'user-switch', 'usergroup-add', 'usergroup-delete', 'tablet', 'video-camera-add', 'upload', 'vertical-align-middle', 'vertical-right', 'up', 'vertical-align-top', 'wechat', 'video-camera', 'wallet', 'warning', 'weibo-circle', 'whats-app', 'weibo-square', 'vertical-left', 'wifi', 'weibo', 'windows', 'vertical-align-bottom', 'yahoo', 'woman', 'yuque', 'zhihu', 'up-circle', 'zoom-in', 'youtube', 'verified', 'swap-right', 'tag', 'zoom-out'
        ],
        twotone: [
            'account-book', 'api', 'appstore', 'audio', 'bank', 'bell', 'alert', 'build', 'bug', 'camera', 'calendar', 'book', 'bulb', 'calculator', 'box-plot', 'carry-out', 'check-circle', 'check-square', 'ci-circle', 'clock-circle', 'close-circle', 'close-square', 'cloud', 'ci', 'car', 'code', 'compass', 'copyright-circle', 'control', 'copyright', 'credit-card', 'container', 'customer-service', 'dashboard', 'contacts', 'copy', 'delete', 'database', 'diff', 'crown', 'dollar-circle', 'dislike', 'down-circle', 'dollar', 'down-square', 'edit', 'exclamation-circle', 'euro', 'eye-invisible', 'environment', 'eye', 'experiment', 'file-add', 'file-exclamation', 'euro-circle', 'file-markdown', 'file-image', 'file-excel', 'file-ppt', 'file', 'file-zip', 'file-word', 'file-text', 'fire', 'folder-add', 'file-pdf', 'flag', 'filter', 'folder', 'folder-open', 'frown', 'gift', 'funnel-plot', 'fund', 'home', 'highlight', 'hdd', 'hourglass', 'gold', 'info-circle', 'html5', 'heart', 'idcard', 'insurance', 'interaction', 'layout', 'left-circle', 'like', 'left-square', 'mail', 'file-unknown', 'lock', 'meh', 'message', 'medicine-box', 'minus-circle', 'mobile', 'money-collect', 'notification', 'minus-square', 'pause-circle', 'pie-chart', 'plus-circle', 'pound-circle', 'printer', 'plus-square', 'play-square', 'play-circle', 'profile', 'pushpin', 'picture', 'phone', 'property-safety', 'question-circle', 'reconciliation', 'red-envelope', 'right-circle', 'right-square', 'rest', 'safety-certificate', 'rocket', 'schedule', 'security-scan', 'setting', 'save', 'shop', 'project', 'shopping', 'skin', 'smile', 'snippets', 'sound', 'star', 'sliders', 'stop', 'switcher', 'tablet', 'tags', 'thunderbolt', 'tool', 'trademark-circle', 'trophy', 'unlock', 'tag', 'usb', 'up-circle', 'up-square', 'wallet', 'video-camera', 'warning'
        ]
    };

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ANT_ICON_ANGULAR_CONSOLE_PREFIX = ANT_ICON_ANGULAR_CONSOLE_PREFIX;
    exports.DynamicLoadingTimeoutError = DynamicLoadingTimeoutError;
    exports.HttpModuleNotImport = HttpModuleNotImport;
    exports.IconDirective = IconDirective;
    exports.IconModule = IconModule;
    exports.IconNotFoundError = IconNotFoundError;
    exports.IconService = IconService;
    exports.NameSpaceIsNotSpecifyError = NameSpaceIsNotSpecifyError;
    exports.SVGTagNotFoundError = SVGTagNotFoundError;
    exports.UrlNotSafeError = UrlNotSafeError;
    exports.alreadyHasAThemeSuffix = alreadyHasAThemeSuffix;
    exports.cloneSVG = cloneSVG;
    exports.error = error;
    exports.getIconDefinitionFromAbbr = getIconDefinitionFromAbbr;
    exports.getNameAndNamespace = getNameAndNamespace;
    exports.getSecondaryColor = getSecondaryColor;
    exports.hasNamespace = hasNamespace;
    exports.isIconDefinition = isIconDefinition;
    exports.manifest = manifest;
    exports.mapAbbrToTheme = mapAbbrToTheme;
    exports.replaceFillColor = replaceFillColor;
    exports.warn = warn;
    exports.withSuffix = withSuffix;
    exports.withSuffixAndColor = withSuffixAndColor;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ant-design-icons-angular.umd.js.map
