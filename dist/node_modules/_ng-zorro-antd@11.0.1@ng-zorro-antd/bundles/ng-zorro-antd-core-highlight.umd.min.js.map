{"version":3,"sources":["../../components/core/highlight/highlight.pipe.ts","../../components/core/highlight/highlight.module.ts"],"names":["SURROGATE_PAIR_REGEXP","NON_ALPHANUMERIC_REGEXP","NzHighlightPipe","this","UNIQUE_WRAPPERS","prototype","transform","value","highlightValue","flags","klass","searchValue","RegExp","replace","match","charCodeAt","encodeEntities","Pipe","args","name","pure","NgModule","imports","CommonModule","exports","declarations"],"mappings":"sfAQA,IAAMA,EAAwB,kCAExBC,EAA0B,iCAoBhC,SAAAC,IAKUC,KAAAC,gBAAoC,CAAC,qBAAsB,8BAEnEF,EAAAG,UAAAC,UAAA,SAAUC,EAAeC,EAAwBC,EAAgBC,GAC/D,IAAKF,EACH,OAAOD,EAIT,IAAMI,EAAc,IAAIC,OAAOJ,EAAeK,QAAQ,6BAA8B,QAASJ,GAE7F,OA5BJ,SAAwBF,GACtB,OAAOA,EACJM,QAAQ,KAAM,SACdA,QAAQb,GAAuB,SAACc,GAG/B,MAAO,MAAqB,MAFjBA,EAAMC,WAAW,GAEV,QADND,EAAMC,WAAW,GACc,OAAU,OAAO,OAE7DF,QAAQZ,GAAyB,SAACa,GAAkB,MAAA,KAAKA,EAAMC,WAAW,GAAE,OAC5EF,QAAQ,KAAM,QACdA,QAAQ,KAAM,QAkBRG,CADWT,EAAMM,QAAQF,EAAgBR,KAAKC,gBAAgB,GAAE,KAAKD,KAAKC,gBAAgB,KAE9FS,QAAQ,IAAID,OAAOT,KAAKC,gBAAgB,GAAI,KAAMM,EAAQ,gBAAgBA,EAAK,KAAO,UACtFG,QAAQ,IAAID,OAAOT,KAAKC,gBAAgB,GAAI,KAAM,qCAjBxDa,EAAAA,KAAIC,KAAA,CAAC,CACJC,KAAM,cACNC,MAAM,YClBR,iCALCC,EAAAA,SAAQH,KAAA,CAAC,CACRI,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACtB,GACVuB,aAAc,CAACvB","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\n// Regular Expressions for parsing tags and attributes\nconst SURROGATE_PAIR_REGEXP = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// ! to ~ is the ASCII range.\nconst NON_ALPHANUMERIC_REGEXP = /([^\\#-~ |!])/g;\n\n/**\n * Escapes all potentially dangerous characters, so that the\n * resulting string can be safely inserted into attribute or\n * element text.\n */\nfunction encodeEntities(value: string): string {\n  return value\n    .replace(/&/g, '&amp;')\n    .replace(SURROGATE_PAIR_REGEXP, (match: string) => {\n      const hi = match.charCodeAt(0);\n      const low = match.charCodeAt(1);\n      return `&#${(hi - 0xd800) * 0x400 + (low - 0xdc00) + 0x10000};`;\n    })\n    .replace(NON_ALPHANUMERIC_REGEXP, (match: string) => `&#${match.charCodeAt(0)};`)\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n}\n\n@Pipe({\n  name: 'nzHighlight',\n  pure: true\n})\nexport class NzHighlightPipe implements PipeTransform {\n  private UNIQUE_WRAPPERS: [string, string] = ['##==-open_tag-==##', '##==-close_tag-==##'];\n\n  transform(value: string, highlightValue: string, flags?: string, klass?: string): string | null {\n    if (!highlightValue) {\n      return value;\n    }\n\n    // Escapes regex keyword to interpret these characters literally\n    const searchValue = new RegExp(highlightValue.replace(/([.*+?^=!:${}()|[\\]\\/\\\\])/g, '\\\\$&'), flags);\n    const wrapValue = value.replace(searchValue, `${this.UNIQUE_WRAPPERS[0]}$&${this.UNIQUE_WRAPPERS[1]}`);\n    return encodeEntities(wrapValue)\n      .replace(new RegExp(this.UNIQUE_WRAPPERS[0], 'g'), klass ? `<span class=\"${klass}\">` : '<span>')\n      .replace(new RegExp(this.UNIQUE_WRAPPERS[1], 'g'), '</span>');\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { NzHighlightPipe } from './highlight.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [NzHighlightPipe],\n  declarations: [NzHighlightPipe]\n})\nexport class NzHighlightModule {}\n"]}