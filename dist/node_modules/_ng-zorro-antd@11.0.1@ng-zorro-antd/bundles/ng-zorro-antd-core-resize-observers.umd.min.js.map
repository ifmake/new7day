{"version":3,"sources":["../../components/core/resize-observers/resize-observers.service.ts","../../components/core/resize-observers/resize-observers.module.ts"],"names":["NzResizeObserverFactory","prototype","create","callback","ResizeObserver","Injectable","args","providedIn","NzResizeObserver","nzResizeObserverFactory","this","observedElements","Map","ngOnDestroy","_this","forEach","_","element","cleanupObserver","observe","elementOrRef","coerceElement","Observable","observer","subscription","observeElement","subscribe","unsubscribe","unobserveElement","has","get","count","stream_1","Subject","mutations","next","set","stream","_a","disconnect","complete","delete","NgModule","providers"],"mappings":"2uBAcA,SAAAA,YACEA,EAAAC,UAAAC,OAAA,SAAOC,GACL,YAAiC,IAAnBC,EAAAA,QAAiC,KAAO,IAAIA,EAAAA,QAAeD,wHAH5EE,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,4BAoBxB,SAAAC,EAAoBC,GAAAC,KAAAD,wBAAAA,EATZC,KAAAC,iBAAmB,IAAIC,WAW/BJ,EAAAP,UAAAY,YAAA,WAAA,IAAAC,EAAAJ,KACEA,KAAKC,iBAAiBI,SAAQ,SAACC,EAAGC,GAAY,OAAAH,EAAKI,gBAAgBD,OAGrET,EAAAP,UAAAkB,QAAA,SAAQC,GAAR,IAAAN,EAAAJ,KACQO,EAAUI,EAAAA,cAAcD,GAE9B,OAAO,IAAIE,EAAAA,YAAW,SAACC,GACrB,IACMC,EADSV,EAAKW,eAAeR,GACPS,UAAUH,GAEtC,OAAO,WACLC,EAAaG,cACbb,EAAKc,iBAAiBX,QASpBT,EAAAP,UAAAwB,eAAA,SAAeR,GACrB,GAAKP,KAAKC,iBAAiBkB,IAAIZ,GAQ7BP,KAAKC,iBAAiBmB,IAAIb,GAAUc,YARG,CACvC,IAAMC,EAAS,IAAIC,EAAAA,QACbV,EAAWb,KAAKD,wBAAwBP,QAAO,SAAAgC,GAAa,OAAAF,EAAOG,KAAKD,MAC1EX,GACFA,EAASJ,QAAQF,GAEnBP,KAAKC,iBAAiByB,IAAInB,EAAS,CAAEM,SAAQA,EAAEc,OAAML,EAAED,MAAO,IAIhE,OAAOrB,KAAKC,iBAAiBmB,IAAIb,GAAUoB,QAOrC7B,EAAAP,UAAA2B,iBAAA,SAAiBX,GACnBP,KAAKC,iBAAiBkB,IAAIZ,KAC5BP,KAAKC,iBAAiBmB,IAAIb,GAAUc,QAC/BrB,KAAKC,iBAAiBmB,IAAIb,GAAUc,OACvCrB,KAAKQ,gBAAgBD,KAMnBT,EAAAP,UAAAiB,gBAAA,SAAgBD,GACtB,GAAIP,KAAKC,iBAAiBkB,IAAIZ,GAAU,CAChC,IAAAqB,EAAuB5B,KAAKC,iBAAiBmB,IAAIb,GAA/CM,EAAQe,EAAAf,SAAEc,EAAMC,EAAAD,OACpBd,GACFA,EAASgB,aAEXF,EAAOG,WACP9B,KAAKC,iBAAiB8B,OAAOxB,wIAvElCZ,EAAAA,WAAUC,KAAA,CAAC,CAAEC,WAAY,oDAYqBP,WCtB/C,iCAHC0C,EAAAA,SAAQpC,KAAA,CAAC,CACRqC,UAAW,CAAC3C","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { ElementRef, Injectable, OnDestroy } from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Observable, Observer, Subject } from 'rxjs';\n\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n */\n@Injectable({ providedIn: 'root' })\nexport class NzResizeObserverFactory {\n  create(callback: ResizeObserverCallback): ResizeObserver | null {\n    return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n  }\n}\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({ providedIn: 'root' })\nexport class NzResizeObserver implements OnDestroy {\n  /** Keeps track of the existing ResizeObservers so they can be reused. */\n  private observedElements = new Map<\n    Element,\n    {\n      observer: ResizeObserver | null;\n      stream: Subject<ResizeObserverEntry[]>;\n      count: number;\n    }\n  >();\n\n  constructor(private nzResizeObserverFactory: NzResizeObserverFactory) {}\n\n  ngOnDestroy(): void {\n    this.observedElements.forEach((_, element) => this.cleanupObserver(element));\n  }\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<ResizeObserverEntry[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<ResizeObserverEntry[]>) => {\n      const stream = this.observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this.unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing ResizeObserver if available, or creating a\n   * new one if not.\n   */\n  private observeElement(element: Element): Subject<ResizeObserverEntry[]> {\n    if (!this.observedElements.has(element)) {\n      const stream = new Subject<ResizeObserverEntry[]>();\n      const observer = this.nzResizeObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element);\n      }\n      this.observedElements.set(element, { observer, stream, count: 1 });\n    } else {\n      this.observedElements.get(element)!.count++;\n    }\n    return this.observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\n   * observing this element.\n   */\n  private unobserveElement(element: Element): void {\n    if (this.observedElements.has(element)) {\n      this.observedElements.get(element)!.count--;\n      if (!this.observedElements.get(element)!.count) {\n        this.cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying ResizeObserver for the specified element. */\n  private cleanupObserver(element: Element): void {\n    if (this.observedElements.has(element)) {\n      const { observer, stream } = this.observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this.observedElements.delete(element);\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NgModule } from '@angular/core';\nimport { NzResizeObserverFactory } from './resize-observers.service';\n\n@NgModule({\n  providers: [NzResizeObserverFactory]\n})\nexport class NzResizeObserversModule {}\n"]}