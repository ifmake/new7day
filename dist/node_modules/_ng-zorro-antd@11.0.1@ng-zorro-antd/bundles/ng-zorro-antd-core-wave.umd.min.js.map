{"version":3,"sources":["../../components/core/wave/nz-wave-renderer.ts","../../components/core/wave/nz-wave.directive.ts","../../components/core/wave/nz-wave.module.ts"],"names":["NzWaveRenderer","triggerElement","ngZone","insertExtraNode","platformId","_this","this","waveTransitionDuration","styleForPseudo","extraNode","lastTime","onClick","event","getAttribute","target","tagName","className","indexOf","fadeOutWave","platform","Platform","clickHandler","bind","bindTriggerEvent","Object","defineProperty","prototype","isBrowser","runOutsideAngular","removeTriggerEvent","addEventListener","removeEventListener","removeStyleAndExtraNode","document","body","contains","removeChild","destroy","node","waveColor","getWaveColor","setAttribute","waveAttributeName","Date","now","isValidColor","createElement","innerHTML","appendChild","runTimeoutOutsideZone","removeAttribute","color","isNotGrey","test","match","nodeStyle","getComputedStyle","getPropertyValue","fn","delay","setTimeout","NZ_WAVE_GLOBAL_DEFAULT_CONFIG","disabled","NZ_WAVE_GLOBAL_CONFIG","InjectionToken","providedIn","factory","NZ_WAVE_GLOBAL_CONFIG_FACTORY","NzWaveDirective","elementRef","config","animationType","nzWaveExtraNode","waveDisabled","isConfigDisabled","waveRenderer","ngOnDestroy","ngOnInit","renderWaveIfEnabled","nativeElement","disable","enable","Directive","args","selector","exportAs","NgZone","ElementRef","Optional","type","Inject","ANIMATION_MODULE_TYPE","PLATFORM_ID","Input","NgModule","imports","PlatformModule","exports","declarations"],"mappings":"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","sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Platform } from '@angular/cdk/platform';\nimport { NgZone } from '@angular/core';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\n\nexport class NzWaveRenderer {\n  private waveTransitionDuration = 400;\n  private styleForPseudo: HTMLStyleElement | null = null;\n  private extraNode: HTMLDivElement | null = null;\n  private lastTime = 0;\n  private platform!: Platform;\n  clickHandler: (event: MouseEvent) => void;\n  get waveAttributeName(): string {\n    return this.insertExtraNode ? 'ant-click-animating' : 'ant-click-animating-without-extra-node';\n  }\n\n  constructor(\n    private triggerElement: HTMLElement,\n    private ngZone: NgZone,\n    private insertExtraNode: boolean,\n    private platformId: NzSafeAny\n  ) {\n    this.platform = new Platform(this.platformId);\n    this.clickHandler = this.onClick.bind(this);\n    this.bindTriggerEvent();\n  }\n\n  onClick = (event: MouseEvent) => {\n    if (\n      !this.triggerElement ||\n      !this.triggerElement.getAttribute ||\n      this.triggerElement.getAttribute('disabled') ||\n      (event.target as HTMLElement).tagName === 'INPUT' ||\n      this.triggerElement.className.indexOf('disabled') >= 0\n    ) {\n      return;\n    }\n    this.fadeOutWave();\n  };\n\n  bindTriggerEvent(): void {\n    if (this.platform.isBrowser) {\n      this.ngZone.runOutsideAngular(() => {\n        this.removeTriggerEvent();\n        if (this.triggerElement) {\n          this.triggerElement.addEventListener('click', this.clickHandler, true);\n        }\n      });\n    }\n  }\n\n  removeTriggerEvent(): void {\n    if (this.triggerElement) {\n      this.triggerElement.removeEventListener('click', this.clickHandler, true);\n    }\n  }\n\n  removeStyleAndExtraNode(): void {\n    if (this.styleForPseudo && document.body.contains(this.styleForPseudo)) {\n      document.body.removeChild(this.styleForPseudo);\n      this.styleForPseudo = null;\n    }\n    if (this.insertExtraNode && this.triggerElement.contains(this.extraNode)) {\n      this.triggerElement.removeChild(this.extraNode as Node);\n    }\n  }\n\n  destroy(): void {\n    this.removeTriggerEvent();\n    this.removeStyleAndExtraNode();\n  }\n\n  private fadeOutWave(): void {\n    const node = this.triggerElement;\n    const waveColor = this.getWaveColor(node);\n    node.setAttribute(this.waveAttributeName, 'true');\n    if (Date.now() < this.lastTime + this.waveTransitionDuration) {\n      return;\n    }\n\n    if (this.isValidColor(waveColor)) {\n      if (!this.styleForPseudo) {\n        this.styleForPseudo = document.createElement('style');\n      }\n\n      this.styleForPseudo.innerHTML = `\n      [ant-click-animating-without-extra-node='true']::after, .ant-click-animating-node {\n        --antd-wave-shadow-color: ${waveColor};\n      }`;\n      document.body.appendChild(this.styleForPseudo);\n    }\n\n    if (this.insertExtraNode) {\n      if (!this.extraNode) {\n        this.extraNode = document.createElement('div');\n      }\n      this.extraNode.className = 'ant-click-animating-node';\n      node.appendChild(this.extraNode);\n    }\n\n    this.lastTime = Date.now();\n\n    this.runTimeoutOutsideZone(() => {\n      node.removeAttribute(this.waveAttributeName);\n      this.removeStyleAndExtraNode();\n    }, this.waveTransitionDuration);\n  }\n\n  private isValidColor(color: string): boolean {\n    return (\n      !!color &&\n      color !== '#ffffff' &&\n      color !== 'rgb(255, 255, 255)' &&\n      this.isNotGrey(color) &&\n      !/rgba\\(\\d*, \\d*, \\d*, 0\\)/.test(color) &&\n      color !== 'transparent'\n    );\n  }\n\n  private isNotGrey(color: string): boolean {\n    const match = color.match(/rgba?\\((\\d*), (\\d*), (\\d*)(, [\\.\\d]*)?\\)/);\n    if (match && match[1] && match[2] && match[3]) {\n      return !(match[1] === match[2] && match[2] === match[3]);\n    }\n    return true;\n  }\n\n  private getWaveColor(node: HTMLElement): string {\n    const nodeStyle = getComputedStyle(node);\n    return (\n      nodeStyle.getPropertyValue('border-top-color') || // Firefox Compatible\n      nodeStyle.getPropertyValue('border-color') ||\n      nodeStyle.getPropertyValue('background-color')\n    );\n  }\n\n  private runTimeoutOutsideZone(fn: () => void, delay: number): void {\n    this.ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { Directive, ElementRef, Inject, InjectionToken, Input, NgZone, OnDestroy, OnInit, Optional, PLATFORM_ID } from '@angular/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { NzSafeAny } from 'ng-zorro-antd/core/types';\nimport { NzWaveRenderer } from './nz-wave-renderer';\n\nexport interface NzWaveConfig {\n  disabled?: boolean;\n}\n\nexport const NZ_WAVE_GLOBAL_DEFAULT_CONFIG: NzWaveConfig = {\n  disabled: false\n};\n\nexport const NZ_WAVE_GLOBAL_CONFIG = new InjectionToken<NzWaveConfig>('nz-wave-global-options', {\n  providedIn: 'root',\n  factory: NZ_WAVE_GLOBAL_CONFIG_FACTORY\n});\n\nexport function NZ_WAVE_GLOBAL_CONFIG_FACTORY(): NzWaveConfig {\n  return NZ_WAVE_GLOBAL_DEFAULT_CONFIG;\n}\n\n@Directive({\n  selector: '[nz-wave],button[nz-button]:not([nzType=\"link\"]):not([nzType=\"text\"])',\n  exportAs: 'nzWave'\n})\nexport class NzWaveDirective implements OnInit, OnDestroy {\n  @Input() nzWaveExtraNode = false;\n\n  private waveRenderer?: NzWaveRenderer;\n  private waveDisabled: boolean = false;\n\n  get disabled(): boolean {\n    return this.waveDisabled;\n  }\n\n  get rendererRef(): NzWaveRenderer | undefined {\n    return this.waveRenderer;\n  }\n\n  constructor(\n    private ngZone: NgZone,\n    private elementRef: ElementRef,\n    @Optional() @Inject(NZ_WAVE_GLOBAL_CONFIG) private config: NzWaveConfig,\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationType: string,\n    @Inject(PLATFORM_ID) private platformId: NzSafeAny\n  ) {\n    this.waveDisabled = this.isConfigDisabled();\n  }\n\n  isConfigDisabled(): boolean {\n    let disabled = false;\n    if (this.config && typeof this.config.disabled === 'boolean') {\n      disabled = this.config.disabled;\n    }\n    if (this.animationType === 'NoopAnimations') {\n      disabled = true;\n    }\n    return disabled;\n  }\n\n  ngOnDestroy(): void {\n    if (this.waveRenderer) {\n      this.waveRenderer.destroy();\n    }\n  }\n\n  ngOnInit(): void {\n    this.renderWaveIfEnabled();\n  }\n\n  renderWaveIfEnabled(): void {\n    if (!this.waveDisabled && this.elementRef.nativeElement) {\n      this.waveRenderer = new NzWaveRenderer(this.elementRef.nativeElement, this.ngZone, this.nzWaveExtraNode, this.platformId);\n    }\n  }\n\n  disable(): void {\n    this.waveDisabled = true;\n    if (this.waveRenderer) {\n      this.waveRenderer.removeTriggerEvent();\n      this.waveRenderer.removeStyleAndExtraNode();\n    }\n  }\n\n  enable(): void {\n    // config priority\n    this.waveDisabled = this.isConfigDisabled() || false;\n    if (this.waveRenderer) {\n      this.waveRenderer.bindTriggerEvent();\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { PlatformModule } from '@angular/cdk/platform';\nimport { NgModule } from '@angular/core';\nimport { NzWaveDirective } from './nz-wave.directive';\n\n@NgModule({\n  imports: [PlatformModule],\n  exports: [NzWaveDirective],\n  declarations: [NzWaveDirective]\n})\nexport class NzWaveModule {}\n"]}