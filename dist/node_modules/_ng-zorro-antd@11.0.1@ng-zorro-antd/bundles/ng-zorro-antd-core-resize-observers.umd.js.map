{"version":3,"file":"ng-zorro-antd-core-resize-observers.umd.js","sources":["../../components/core/resize-observers/resize-observers.service.ts","../../components/core/resize-observers/resize-observers.module.ts","../../components/core/resize-observers/public-api.ts","../../components/core/resize-observers/ng-zorro-antd-core-resize-observers.ts"],"sourcesContent":["/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { coerceElement } from '@angular/cdk/coercion';\nimport { ElementRef, Injectable, OnDestroy } from '@angular/core';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Observable, Observer, Subject } from 'rxjs';\n\n/**\n * Factory that creates a new ResizeObserver and allows us to stub it out in unit tests.\n */\n@Injectable({ providedIn: 'root' })\nexport class NzResizeObserverFactory {\n  create(callback: ResizeObserverCallback): ResizeObserver | null {\n    return typeof ResizeObserver === 'undefined' ? null : new ResizeObserver(callback);\n  }\n}\n\n/** An injectable service that allows watching elements for changes to their content. */\n@Injectable({ providedIn: 'root' })\nexport class NzResizeObserver implements OnDestroy {\n  /** Keeps track of the existing ResizeObservers so they can be reused. */\n  private observedElements = new Map<\n    Element,\n    {\n      observer: ResizeObserver | null;\n      stream: Subject<ResizeObserverEntry[]>;\n      count: number;\n    }\n  >();\n\n  constructor(private nzResizeObserverFactory: NzResizeObserverFactory) {}\n\n  ngOnDestroy(): void {\n    this.observedElements.forEach((_, element) => this.cleanupObserver(element));\n  }\n\n  observe(elementOrRef: Element | ElementRef<Element>): Observable<ResizeObserverEntry[]> {\n    const element = coerceElement(elementOrRef);\n\n    return new Observable((observer: Observer<ResizeObserverEntry[]>) => {\n      const stream = this.observeElement(element);\n      const subscription = stream.subscribe(observer);\n\n      return () => {\n        subscription.unsubscribe();\n        this.unobserveElement(element);\n      };\n    });\n  }\n\n  /**\n   * Observes the given element by using the existing ResizeObserver if available, or creating a\n   * new one if not.\n   */\n  private observeElement(element: Element): Subject<ResizeObserverEntry[]> {\n    if (!this.observedElements.has(element)) {\n      const stream = new Subject<ResizeObserverEntry[]>();\n      const observer = this.nzResizeObserverFactory.create(mutations => stream.next(mutations));\n      if (observer) {\n        observer.observe(element);\n      }\n      this.observedElements.set(element, { observer, stream, count: 1 });\n    } else {\n      this.observedElements.get(element)!.count++;\n    }\n    return this.observedElements.get(element)!.stream;\n  }\n\n  /**\n   * Un-observes the given element and cleans up the underlying ResizeObserver if nobody else is\n   * observing this element.\n   */\n  private unobserveElement(element: Element): void {\n    if (this.observedElements.has(element)) {\n      this.observedElements.get(element)!.count--;\n      if (!this.observedElements.get(element)!.count) {\n        this.cleanupObserver(element);\n      }\n    }\n  }\n\n  /** Clean up the underlying ResizeObserver for the specified element. */\n  private cleanupObserver(element: Element): void {\n    if (this.observedElements.has(element)) {\n      const { observer, stream } = this.observedElements.get(element)!;\n      if (observer) {\n        observer.disconnect();\n      }\n      stream.complete();\n      this.observedElements.delete(element);\n    }\n  }\n}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nimport { NgModule } from '@angular/core';\nimport { NzResizeObserverFactory } from './resize-observers.service';\n\n@NgModule({\n  providers: [NzResizeObserverFactory]\n})\nexport class NzResizeObserversModule {}\n","/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\nexport { NzResizeObserversModule } from './resize-observers.module';\nexport { NzResizeObserver, NzResizeObserverFactory as ÉµNzResizeObserverFactory } from './resize-observers.service';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["ResizeObserver","Injectable","coerceElement","Observable","Subject","NgModule"],"mappings":"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"}